/**
 */
package BspKnotensystem.provider;

import BspKnotensystem.util.BspKnotensystemAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BspKnotensystemItemProviderAdapterFactory extends BspKnotensystemAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BspKnotensystemItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.InputsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputsTypeItemProvider inputsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.InputsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputsTypeAdapter() {
		if (inputsTypeItemProvider == null) {
			inputsTypeItemProvider = new InputsTypeItemProvider(this);
		}

		return inputsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.InputType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputTypeItemProvider inputTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.InputType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputTypeAdapter() {
		if (inputTypeItemProvider == null) {
			inputTypeItemProvider = new InputTypeItemProvider(this);
		}

		return inputTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.NewDataSetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewDataSetTypeItemProvider newDataSetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.NewDataSetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewDataSetTypeAdapter() {
		if (newDataSetTypeItemProvider == null) {
			newDataSetTypeItemProvider = new NewDataSetTypeItemProvider(this);
		}

		return newDataSetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.NodesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodesTypeItemProvider nodesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.NodesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodesTypeAdapter() {
		if (nodesTypeItemProvider == null) {
			nodesTypeItemProvider = new NodesTypeItemProvider(this);
		}

		return nodesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.NodeSystemType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeSystemTypeItemProvider nodeSystemTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.NodeSystemType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeSystemTypeAdapter() {
		if (nodeSystemTypeItemProvider == null) {
			nodeSystemTypeItemProvider = new NodeSystemTypeItemProvider(this);
		}

		return nodeSystemTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.NodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeTypeItemProvider nodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.NodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeTypeAdapter() {
		if (nodeTypeItemProvider == null) {
			nodeTypeItemProvider = new NodeTypeItemProvider(this);
		}

		return nodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.ResultsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultsTypeItemProvider resultsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.ResultsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultsTypeAdapter() {
		if (resultsTypeItemProvider == null) {
			resultsTypeItemProvider = new ResultsTypeItemProvider(this);
		}

		return resultsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.ResultType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultTypeItemProvider resultTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.ResultType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultTypeAdapter() {
		if (resultTypeItemProvider == null) {
			resultTypeItemProvider = new ResultTypeItemProvider(this);
		}

		return resultTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.SourcesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourcesTypeItemProvider sourcesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.SourcesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourcesTypeAdapter() {
		if (sourcesTypeItemProvider == null) {
			sourcesTypeItemProvider = new SourcesTypeItemProvider(this);
		}

		return sourcesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BspKnotensystem.SourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceTypeItemProvider sourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BspKnotensystem.SourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceTypeAdapter() {
		if (sourceTypeItemProvider == null) {
			sourceTypeItemProvider = new SourceTypeItemProvider(this);
		}

		return sourceTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (inputsTypeItemProvider != null) inputsTypeItemProvider.dispose();
		if (inputTypeItemProvider != null) inputTypeItemProvider.dispose();
		if (newDataSetTypeItemProvider != null) newDataSetTypeItemProvider.dispose();
		if (nodesTypeItemProvider != null) nodesTypeItemProvider.dispose();
		if (nodeSystemTypeItemProvider != null) nodeSystemTypeItemProvider.dispose();
		if (nodeTypeItemProvider != null) nodeTypeItemProvider.dispose();
		if (resultsTypeItemProvider != null) resultsTypeItemProvider.dispose();
		if (resultTypeItemProvider != null) resultTypeItemProvider.dispose();
		if (sourcesTypeItemProvider != null) sourcesTypeItemProvider.dispose();
		if (sourceTypeItemProvider != null) sourceTypeItemProvider.dispose();
	}

}
